/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_lg-share_dist_lg-share_js-node_modules_lg-thumbnail_dist_lg-thumbnail_js-node_mo-c296ce"],{

/***/ "./node_modules/lg-share/dist/lg-share.js":
/*!************************************************!*\
  !*** ./node_modules/lg-share/dist/lg-share.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! lg-share - v1.2.1 - 2020-06-13\n* http://sachinchoolur.github.io/lightGallery\n* Copyright (c) 2020 Sachin N; Licensed GPLv3 */\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {\n      return (factory(a0));\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function ($) {\n\n(function() {\n\n    'use strict';\n\n    var defaults = {\n        share: true,\n        facebook: true,\n        facebookDropdownText: 'Facebook',\n        twitter: true,\n        twitterDropdownText: 'Twitter',\n        googlePlus: true,\n        googlePlusDropdownText: 'GooglePlus',\n        pinterest: true,\n        pinterestDropdownText: 'Pinterest'\n    };\n\n    var Share = function(element) {\n\n        this.core = $(element).data('lightGallery');\n\n        this.core.s = $.extend({}, defaults, this.core.s);\n        if (this.core.s.share) {\n            this.init();\n        }\n\n        return this;\n    };\n\n    Share.prototype.init = function() {\n        var _this = this;\n\n        var shareHtml = '<button type=\"button\" aria-label=\"Share\" id=\"lg-share\" class=\"lg-icon\" aria-haspopup=\"true\" aria-expanded=\"false\">' +\n            '<ul class=\"lg-dropdown\" style=\"position: absolute;\">';\n        shareHtml += _this.core.s.facebook ? '<li><a id=\"lg-share-facebook\" target=\"_blank\"><span class=\"lg-icon\"></span><span class=\"lg-dropdown-text\">' + this.core.s.facebookDropdownText + '</span></a></li>' : '';\n        shareHtml += _this.core.s.twitter ? '<li><a id=\"lg-share-twitter\" target=\"_blank\"><span class=\"lg-icon\"></span><span class=\"lg-dropdown-text\">' + this.core.s.twitterDropdownText + '</span></a></li>' : '';\n        shareHtml += _this.core.s.googlePlus ? '<li><a id=\"lg-share-googleplus\" target=\"_blank\"><span class=\"lg-icon\"></span><span class=\"lg-dropdown-text\">' + this.core.s.googlePlusDropdownText + '</span></a></li>' : '';\n        shareHtml += _this.core.s.pinterest ? '<li><a id=\"lg-share-pinterest\" target=\"_blank\"><span class=\"lg-icon\"></span><span class=\"lg-dropdown-text\">' + this.core.s.pinterestDropdownText + '</span></a></li>' : '';\n        shareHtml += '</ul></button>';\n\n        this.core.$outer.find('.lg-toolbar').append(shareHtml);\n        this.core.$outer.find('.lg').append('<div id=\"lg-dropdown-overlay\"></div>');\n        $('#lg-share').on('click.lg', function(){\n            _this.core.$outer.toggleClass('lg-dropdown-active');\n            var ariaExpanded = $('#lg-share').attr('aria-expanded');\n            $('#lg-share').attr('aria-expanded', ariaExpanded === 'true' ? false: true);\n        });\n\n        $('#lg-dropdown-overlay').on('click.lg', function(){\n            _this.core.$outer.removeClass('lg-dropdown-active');\n            $('#lg-share').attr('aria-expanded', false);\n        });\n\n        _this.core.$el.on('onAfterSlide.lg.tm', function(event, prevIndex, index) {\n\n            setTimeout(function() {\n\n                $('#lg-share-facebook').attr('href', 'https://www.facebook.com/sharer/sharer.php?u=' + (encodeURIComponent(_this.getSahreProps(index, 'facebookShareUrl') || window.location.href)));\n\n                $('#lg-share-twitter').attr('href', 'https://twitter.com/intent/tweet?text=' + _this.getSahreProps(index, 'tweetText') + '&url=' + (encodeURIComponent(_this.getSahreProps(index, 'twitterShareUrl') || window.location.href)));\n\n                $('#lg-share-googleplus').attr('href', 'https://plus.google.com/share?url=' + (encodeURIComponent(_this.getSahreProps(index, 'googleplusShareUrl') || window.location.href)));\n\n                $('#lg-share-pinterest').attr('href', 'http://www.pinterest.com/pin/create/button/?url=' + (encodeURIComponent(_this.getSahreProps(index, 'pinterestShareUrl') || window.location.href)) + '&media=' + encodeURIComponent(_this.getSahreProps(index, 'src')) + '&description=' + _this.getSahreProps(index, 'pinterestText'));\n\n            }, 100);\n        });\n    };\n\n    Share.prototype.getSahreProps = function(index, prop){\n        var shareProp = '';\n        if(this.core.s.dynamic) {\n            shareProp = this.core.s.dynamicEl[index][prop];\n        } else {\n            var _href = this.core.$items.eq(index).attr('href');\n            var _prop = this.core.$items.eq(index).data(prop);\n            shareProp = prop === 'src' ? _href || _prop : _prop;\n        }\n        return shareProp;\n    };\n\n    Share.prototype.destroy = function() {\n\n    };\n\n    $.fn.lightGallery.modules.share = Share;\n\n})();\n\n\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGctc2hhcmUvZGlzdC9sZy1zaGFyZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EsK0JBQStCOztBQUUvQjtBQUNBLE1BQU0sSUFBMEM7QUFDaEQ7QUFDQSxJQUFJLGlDQUFPLENBQUMseUVBQVEsQ0FBQyxtQ0FBRTtBQUN2QjtBQUNBLEtBQUs7QUFBQSxrR0FBQztBQUNOLElBQUksS0FBSyxFQU9OO0FBQ0gsQ0FBQzs7QUFFRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLENBQUM7Ozs7QUFJRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xnLXNoYXJlL2Rpc3QvbGctc2hhcmUuanM/YjRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbGctc2hhcmUgLSB2MS4yLjEgLSAyMDIwLTA2LTEzXG4qIGh0dHA6Ly9zYWNoaW5jaG9vbHVyLmdpdGh1Yi5pby9saWdodEdhbGxlcnlcbiogQ29weXJpZ2h0IChjKSAyMDIwIFNhY2hpbiBOOyBMaWNlbnNlZCBHUEx2MyAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSB1bmxlc3MgYW1kTW9kdWxlSWQgaXMgc2V0XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uIChhMCkge1xuICAgICAgcmV0dXJuIChmYWN0b3J5KGEwKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAvLyBsaWtlIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgfSBlbHNlIHtcbiAgICBmYWN0b3J5KHJvb3RbXCJqUXVlcnlcIl0pO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uICgkKSB7XG5cbihmdW5jdGlvbigpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgc2hhcmU6IHRydWUsXG4gICAgICAgIGZhY2Vib29rOiB0cnVlLFxuICAgICAgICBmYWNlYm9va0Ryb3Bkb3duVGV4dDogJ0ZhY2Vib29rJyxcbiAgICAgICAgdHdpdHRlcjogdHJ1ZSxcbiAgICAgICAgdHdpdHRlckRyb3Bkb3duVGV4dDogJ1R3aXR0ZXInLFxuICAgICAgICBnb29nbGVQbHVzOiB0cnVlLFxuICAgICAgICBnb29nbGVQbHVzRHJvcGRvd25UZXh0OiAnR29vZ2xlUGx1cycsXG4gICAgICAgIHBpbnRlcmVzdDogdHJ1ZSxcbiAgICAgICAgcGludGVyZXN0RHJvcGRvd25UZXh0OiAnUGludGVyZXN0J1xuICAgIH07XG5cbiAgICB2YXIgU2hhcmUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG5cbiAgICAgICAgdGhpcy5jb3JlID0gJChlbGVtZW50KS5kYXRhKCdsaWdodEdhbGxlcnknKTtcblxuICAgICAgICB0aGlzLmNvcmUucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgdGhpcy5jb3JlLnMpO1xuICAgICAgICBpZiAodGhpcy5jb3JlLnMuc2hhcmUpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFNoYXJlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHNoYXJlSHRtbCA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBhcmlhLWxhYmVsPVwiU2hhcmVcIiBpZD1cImxnLXNoYXJlXCIgY2xhc3M9XCJsZy1pY29uXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj4nICtcbiAgICAgICAgICAgICc8dWwgY2xhc3M9XCJsZy1kcm9wZG93blwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlO1wiPic7XG4gICAgICAgIHNoYXJlSHRtbCArPSBfdGhpcy5jb3JlLnMuZmFjZWJvb2sgPyAnPGxpPjxhIGlkPVwibGctc2hhcmUtZmFjZWJvb2tcIiB0YXJnZXQ9XCJfYmxhbmtcIj48c3BhbiBjbGFzcz1cImxnLWljb25cIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJsZy1kcm9wZG93bi10ZXh0XCI+JyArIHRoaXMuY29yZS5zLmZhY2Vib29rRHJvcGRvd25UZXh0ICsgJzwvc3Bhbj48L2E+PC9saT4nIDogJyc7XG4gICAgICAgIHNoYXJlSHRtbCArPSBfdGhpcy5jb3JlLnMudHdpdHRlciA/ICc8bGk+PGEgaWQ9XCJsZy1zaGFyZS10d2l0dGVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PHNwYW4gY2xhc3M9XCJsZy1pY29uXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwibGctZHJvcGRvd24tdGV4dFwiPicgKyB0aGlzLmNvcmUucy50d2l0dGVyRHJvcGRvd25UZXh0ICsgJzwvc3Bhbj48L2E+PC9saT4nIDogJyc7XG4gICAgICAgIHNoYXJlSHRtbCArPSBfdGhpcy5jb3JlLnMuZ29vZ2xlUGx1cyA/ICc8bGk+PGEgaWQ9XCJsZy1zaGFyZS1nb29nbGVwbHVzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PHNwYW4gY2xhc3M9XCJsZy1pY29uXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwibGctZHJvcGRvd24tdGV4dFwiPicgKyB0aGlzLmNvcmUucy5nb29nbGVQbHVzRHJvcGRvd25UZXh0ICsgJzwvc3Bhbj48L2E+PC9saT4nIDogJyc7XG4gICAgICAgIHNoYXJlSHRtbCArPSBfdGhpcy5jb3JlLnMucGludGVyZXN0ID8gJzxsaT48YSBpZD1cImxnLXNoYXJlLXBpbnRlcmVzdFwiIHRhcmdldD1cIl9ibGFua1wiPjxzcGFuIGNsYXNzPVwibGctaWNvblwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImxnLWRyb3Bkb3duLXRleHRcIj4nICsgdGhpcy5jb3JlLnMucGludGVyZXN0RHJvcGRvd25UZXh0ICsgJzwvc3Bhbj48L2E+PC9saT4nIDogJyc7XG4gICAgICAgIHNoYXJlSHRtbCArPSAnPC91bD48L2J1dHRvbj4nO1xuXG4gICAgICAgIHRoaXMuY29yZS4kb3V0ZXIuZmluZCgnLmxnLXRvb2xiYXInKS5hcHBlbmQoc2hhcmVIdG1sKTtcbiAgICAgICAgdGhpcy5jb3JlLiRvdXRlci5maW5kKCcubGcnKS5hcHBlbmQoJzxkaXYgaWQ9XCJsZy1kcm9wZG93bi1vdmVybGF5XCI+PC9kaXY+Jyk7XG4gICAgICAgICQoJyNsZy1zaGFyZScpLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfdGhpcy5jb3JlLiRvdXRlci50b2dnbGVDbGFzcygnbGctZHJvcGRvd24tYWN0aXZlJyk7XG4gICAgICAgICAgICB2YXIgYXJpYUV4cGFuZGVkID0gJCgnI2xnLXNoYXJlJykuYXR0cignYXJpYS1leHBhbmRlZCcpO1xuICAgICAgICAgICAgJCgnI2xnLXNoYXJlJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGFyaWFFeHBhbmRlZCA9PT0gJ3RydWUnID8gZmFsc2U6IHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCcjbGctZHJvcGRvd24tb3ZlcmxheScpLm9uKCdjbGljay5sZycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfdGhpcy5jb3JlLiRvdXRlci5yZW1vdmVDbGFzcygnbGctZHJvcGRvd24tYWN0aXZlJyk7XG4gICAgICAgICAgICAkKCcjbGctc2hhcmUnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy5jb3JlLiRlbC5vbignb25BZnRlclNsaWRlLmxnLnRtJywgZnVuY3Rpb24oZXZlbnQsIHByZXZJbmRleCwgaW5kZXgpIHtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICQoJyNsZy1zaGFyZS1mYWNlYm9vaycpLmF0dHIoJ2hyZWYnLCAnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9JyArIChlbmNvZGVVUklDb21wb25lbnQoX3RoaXMuZ2V0U2FocmVQcm9wcyhpbmRleCwgJ2ZhY2Vib29rU2hhcmVVcmwnKSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZikpKTtcblxuICAgICAgICAgICAgICAgICQoJyNsZy1zaGFyZS10d2l0dGVyJykuYXR0cignaHJlZicsICdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PScgKyBfdGhpcy5nZXRTYWhyZVByb3BzKGluZGV4LCAndHdlZXRUZXh0JykgKyAnJnVybD0nICsgKGVuY29kZVVSSUNvbXBvbmVudChfdGhpcy5nZXRTYWhyZVByb3BzKGluZGV4LCAndHdpdHRlclNoYXJlVXJsJykgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYpKSk7XG5cbiAgICAgICAgICAgICAgICAkKCcjbGctc2hhcmUtZ29vZ2xlcGx1cycpLmF0dHIoJ2hyZWYnLCAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vc2hhcmU/dXJsPScgKyAoZW5jb2RlVVJJQ29tcG9uZW50KF90aGlzLmdldFNhaHJlUHJvcHMoaW5kZXgsICdnb29nbGVwbHVzU2hhcmVVcmwnKSB8fCB3aW5kb3cubG9jYXRpb24uaHJlZikpKTtcblxuICAgICAgICAgICAgICAgICQoJyNsZy1zaGFyZS1waW50ZXJlc3QnKS5hdHRyKCdocmVmJywgJ2h0dHA6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/dXJsPScgKyAoZW5jb2RlVVJJQ29tcG9uZW50KF90aGlzLmdldFNhaHJlUHJvcHMoaW5kZXgsICdwaW50ZXJlc3RTaGFyZVVybCcpIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkgKyAnJm1lZGlhPScgKyBlbmNvZGVVUklDb21wb25lbnQoX3RoaXMuZ2V0U2FocmVQcm9wcyhpbmRleCwgJ3NyYycpKSArICcmZGVzY3JpcHRpb249JyArIF90aGlzLmdldFNhaHJlUHJvcHMoaW5kZXgsICdwaW50ZXJlc3RUZXh0JykpO1xuXG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2hhcmUucHJvdG90eXBlLmdldFNhaHJlUHJvcHMgPSBmdW5jdGlvbihpbmRleCwgcHJvcCl7XG4gICAgICAgIHZhciBzaGFyZVByb3AgPSAnJztcbiAgICAgICAgaWYodGhpcy5jb3JlLnMuZHluYW1pYykge1xuICAgICAgICAgICAgc2hhcmVQcm9wID0gdGhpcy5jb3JlLnMuZHluYW1pY0VsW2luZGV4XVtwcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfaHJlZiA9IHRoaXMuY29yZS4kaXRlbXMuZXEoaW5kZXgpLmF0dHIoJ2hyZWYnKTtcbiAgICAgICAgICAgIHZhciBfcHJvcCA9IHRoaXMuY29yZS4kaXRlbXMuZXEoaW5kZXgpLmRhdGEocHJvcCk7XG4gICAgICAgICAgICBzaGFyZVByb3AgPSBwcm9wID09PSAnc3JjJyA/IF9ocmVmIHx8IF9wcm9wIDogX3Byb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNoYXJlUHJvcDtcbiAgICB9O1xuXG4gICAgU2hhcmUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblxuICAgIH07XG5cbiAgICAkLmZuLmxpZ2h0R2FsbGVyeS5tb2R1bGVzLnNoYXJlID0gU2hhcmU7XG5cbn0pKCk7XG5cblxuXG59KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lg-share/dist/lg-share.js\n");

/***/ }),

/***/ "./node_modules/lg-thumbnail/dist/lg-thumbnail.js":
/*!********************************************************!*\
  !*** ./node_modules/lg-thumbnail/dist/lg-thumbnail.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! lg-thumbnail - v1.2.1 - 2020-06-13\n* http://sachinchoolur.github.io/lightGallery\n* Copyright (c) 2020 Sachin N; Licensed GPLv3 */\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {\n      return (factory(a0));\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function ($) {\n\n(function() {\n\n    'use strict';\n\n    var defaults = {\n        thumbnail: true,\n\n        animateThumb: true,\n        currentPagerPosition: 'middle',\n\n        thumbWidth: 100,\n        thumbHeight: '80px',\n        thumbContHeight: 100,\n        thumbMargin: 5,\n\n        exThumbImage: false,\n        showThumbByDefault: true,\n        toogleThumb: true,\n        pullCaptionUp: true,\n\n        enableThumbDrag: true,\n        enableThumbSwipe: true,\n        swipeThreshold: 50,\n\n        loadYoutubeThumbnail: true,\n        youtubeThumbSize: 1,\n\n        loadVimeoThumbnail: true,\n        vimeoThumbSize: 'thumbnail_small',\n\n        loadDailymotionThumbnail: true\n    };\n\n    var Thumbnail = function(element) {\n\n        // get lightGallery core plugin data\n        this.core = $(element).data('lightGallery');\n\n        // extend module default settings with lightGallery core settings\n        this.core.s = $.extend({}, defaults, this.core.s);\n\n        this.$el = $(element);\n        this.$thumbOuter = null;\n        this.thumbOuterWidth = 0;\n        this.thumbTotalWidth = (this.core.$items.length * (this.core.s.thumbWidth + this.core.s.thumbMargin));\n        this.thumbIndex = this.core.index;\n\n        if (this.core.s.animateThumb) {\n            this.core.s.thumbHeight = '100%';\n        }\n\n        // Thumbnail animation value\n        this.left = 0;\n\n        this.init();\n\n        return this;\n    };\n\n    Thumbnail.prototype.init = function() {\n        var _this = this;\n        if (this.core.s.thumbnail && this.core.$items.length > 1) {\n            if (this.core.s.showThumbByDefault) {\n                setTimeout(function(){\n                    _this.core.$outer.addClass('lg-thumb-open');\n                }, 700);\n            }\n\n            if (this.core.s.pullCaptionUp) {\n                this.core.$outer.addClass('lg-pull-caption-up');\n            }\n\n            this.build();\n            if (this.core.s.animateThumb && this.core.doCss()) {\n                if (this.core.s.enableThumbDrag) {\n                    this.enableThumbDrag();\n                }\n\n                if (this.core.s.enableThumbSwipe) {\n                    this.enableThumbSwipe();\n                }\n\n                this.thumbClickable = false;\n            } else {\n                this.thumbClickable = true;\n            }\n\n            this.toogle();\n            this.thumbkeyPress();\n        }\n    };\n\n    Thumbnail.prototype.build = function() {\n        var _this = this;\n        var thumbList = '';\n        var vimeoErrorThumbSize = '';\n        var $thumb;\n        var html = '<div class=\"lg-thumb-outer\">' +\n            '<div class=\"lg-thumb lg-group\">' +\n            '</div>' +\n            '</div>';\n\n        switch (this.core.s.vimeoThumbSize) {\n            case 'thumbnail_large':\n                vimeoErrorThumbSize = '640';\n                break;\n            case 'thumbnail_medium':\n                vimeoErrorThumbSize = '200x150';\n                break;\n            case 'thumbnail_small':\n                vimeoErrorThumbSize = '100x75';\n        }\n\n        _this.core.$outer.addClass('lg-has-thumb');\n\n        _this.core.$outer.find('.lg').append(html);\n\n        _this.$thumbOuter = _this.core.$outer.find('.lg-thumb-outer');\n        _this.thumbOuterWidth = _this.$thumbOuter.width();\n\n        if (_this.core.s.animateThumb) {\n            _this.core.$outer.find('.lg-thumb').css({\n                width: _this.thumbTotalWidth + 'px',\n                position: 'relative'\n            });\n        }\n\n        if (this.core.s.animateThumb) {\n            _this.$thumbOuter.css('height', _this.core.s.thumbContHeight + 'px');\n        }\n\n        function getThumb(src, thumb, index) {\n            var isVideo = _this.core.isVideo(src, index) || {};\n            var thumbImg;\n            var vimeoId = '';\n\n            if (isVideo.youtube || isVideo.vimeo || isVideo.dailymotion) {\n                if (isVideo.youtube) {\n                    if (_this.core.s.loadYoutubeThumbnail) {\n                        thumbImg = '//img.youtube.com/vi/' + isVideo.youtube[1] + '/' + _this.core.s.youtubeThumbSize + '.jpg';\n                    } else {\n                        thumbImg = thumb;\n                    }\n                } else if (isVideo.vimeo) {\n                    if (_this.core.s.loadVimeoThumbnail) {\n                        thumbImg = '//i.vimeocdn.com/video/error_' + vimeoErrorThumbSize + '.jpg';\n                        vimeoId = isVideo.vimeo[1];\n                    } else {\n                        thumbImg = thumb;\n                    }\n                } else if (isVideo.dailymotion) {\n                    if (_this.core.s.loadDailymotionThumbnail) {\n                        thumbImg = '//www.dailymotion.com/thumbnail/video/' + isVideo.dailymotion[1];\n                    } else {\n                        thumbImg = thumb;\n                    }\n                }\n            } else {\n                thumbImg = thumb;\n            }\n\n            thumbList += '<div data-vimeo-id=\"' + vimeoId + '\" class=\"lg-thumb-item\" style=\"width:' + _this.core.s.thumbWidth + 'px; height: ' + _this.core.s.thumbHeight + '; margin-right: ' + _this.core.s.thumbMargin + 'px\"><img src=\"' + thumbImg + '\" /></div>';\n            vimeoId = '';\n        }\n\n        if (_this.core.s.dynamic) {\n            for (var i = 0; i < _this.core.s.dynamicEl.length; i++) {\n                getThumb(_this.core.s.dynamicEl[i].src, _this.core.s.dynamicEl[i].thumb, i);\n            }\n        } else {\n            _this.core.$items.each(function(i) {\n\n                if (!_this.core.s.exThumbImage) {\n                    getThumb($(this).attr('href') || $(this).attr('data-src'), $(this).find('img').attr('src'), i);\n                } else {\n                    getThumb($(this).attr('href') || $(this).attr('data-src'), $(this).attr(_this.core.s.exThumbImage), i);\n                }\n\n            });\n        }\n\n        _this.core.$outer.find('.lg-thumb').html(thumbList);\n\n        $thumb = _this.core.$outer.find('.lg-thumb-item');\n\n        // Load vimeo thumbnails\n        $thumb.each(function() {\n            var $this = $(this);\n            var vimeoVideoId = $this.attr('data-vimeo-id');\n\n            if (vimeoVideoId) {\n                $.getJSON('//www.vimeo.com/api/v2/video/' + vimeoVideoId + '.json?callback=?', {\n                    format: 'json'\n                }, function(data) {\n                    $this.find('img').attr('src', data[0][_this.core.s.vimeoThumbSize]);\n                });\n            }\n        });\n\n        // manage active class for thumbnail\n        $thumb.eq(_this.core.index).addClass('active');\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\n            $thumb.removeClass('active');\n            $thumb.eq(_this.core.index).addClass('active');\n        });\n\n        $thumb.on('click.lg touchend.lg', function() {\n            var _$this = $(this);\n            setTimeout(function() {\n\n                // In IE9 and bellow touch does not support\n                // Go to slide if browser does not support css transitions\n                if ((_this.thumbClickable && !_this.core.lgBusy) || !_this.core.doCss()) {\n                    _this.core.index = _$this.index();\n                    _this.core.slide(_this.core.index, false, true, false);\n                }\n            }, 50);\n        });\n\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\n            _this.animateThumb(_this.core.index);\n        });\n\n        $(window).on('resize.lg.thumb orientationchange.lg.thumb', function() {\n            setTimeout(function() {\n                _this.animateThumb(_this.core.index);\n                _this.thumbOuterWidth = _this.$thumbOuter.width();\n            }, 200);\n        });\n\n    };\n\n    Thumbnail.prototype.setTranslate = function(value) {\n        // jQuery supports Automatic CSS prefixing since jQuery 1.8.0\n        this.core.$outer.find('.lg-thumb').css({\n            transform: 'translate3d(-' + (value) + 'px, 0px, 0px)'\n        });\n    };\n\n    Thumbnail.prototype.animateThumb = function(index) {\n        var $thumb = this.core.$outer.find('.lg-thumb');\n        if (this.core.s.animateThumb) {\n            var position;\n            switch (this.core.s.currentPagerPosition) {\n                case 'left':\n                    position = 0;\n                    break;\n                case 'middle':\n                    position = (this.thumbOuterWidth / 2) - (this.core.s.thumbWidth / 2);\n                    break;\n                case 'right':\n                    position = this.thumbOuterWidth - this.core.s.thumbWidth;\n            }\n            this.left = ((this.core.s.thumbWidth + this.core.s.thumbMargin) * index - 1) - position;\n            if (this.left > (this.thumbTotalWidth - this.thumbOuterWidth)) {\n                this.left = this.thumbTotalWidth - this.thumbOuterWidth;\n            }\n\n            if (this.left < 0) {\n                this.left = 0;\n            }\n\n            if (this.core.lGalleryOn) {\n                if (!$thumb.hasClass('on')) {\n                    this.core.$outer.find('.lg-thumb').css('transition-duration', this.core.s.speed + 'ms');\n                }\n\n                if (!this.core.doCss()) {\n                    $thumb.animate({\n                        left: -this.left + 'px'\n                    }, this.core.s.speed);\n                }\n            } else {\n                if (!this.core.doCss()) {\n                    $thumb.css('left', -this.left + 'px');\n                }\n            }\n\n            this.setTranslate(this.left);\n\n        }\n    };\n\n    // Enable thumbnail dragging and swiping\n    Thumbnail.prototype.enableThumbDrag = function() {\n\n        var _this = this;\n        var startCoords = 0;\n        var endCoords = 0;\n        var isDraging = false;\n        var isMoved = false;\n        var tempLeft = 0;\n\n        _this.$thumbOuter.addClass('lg-grab');\n\n        _this.core.$outer.find('.lg-thumb').on('mousedown.lg.thumb', function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                // execute only on .lg-object\n                e.preventDefault();\n                startCoords = e.pageX;\n                isDraging = true;\n\n                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                _this.core.$outer.scrollLeft += 1;\n                _this.core.$outer.scrollLeft -= 1;\n\n                // *\n                _this.thumbClickable = false;\n                _this.$thumbOuter.removeClass('lg-grab').addClass('lg-grabbing');\n            }\n        });\n\n        $(window).on('mousemove.lg.thumb', function(e) {\n            if (isDraging) {\n                tempLeft = _this.left;\n                isMoved = true;\n                endCoords = e.pageX;\n\n                _this.$thumbOuter.addClass('lg-dragging');\n\n                tempLeft = tempLeft - (endCoords - startCoords);\n\n                if (tempLeft > (_this.thumbTotalWidth - _this.thumbOuterWidth)) {\n                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\n                }\n\n                if (tempLeft < 0) {\n                    tempLeft = 0;\n                }\n\n                // move current slide\n                _this.setTranslate(tempLeft);\n\n            }\n        });\n\n        $(window).on('mouseup.lg.thumb', function() {\n            if (isMoved) {\n                isMoved = false;\n                _this.$thumbOuter.removeClass('lg-dragging');\n\n                _this.left = tempLeft;\n\n                if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\n                    _this.thumbClickable = true;\n                }\n\n            } else {\n                _this.thumbClickable = true;\n            }\n\n            if (isDraging) {\n                isDraging = false;\n                _this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\n            }\n        });\n\n    };\n\n    Thumbnail.prototype.enableThumbSwipe = function() {\n        var _this = this;\n        var startCoords = 0;\n        var endCoords = 0;\n        var isMoved = false;\n        var tempLeft = 0;\n\n        _this.core.$outer.find('.lg-thumb').on('touchstart.lg', function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                e.preventDefault();\n                startCoords = e.originalEvent.targetTouches[0].pageX;\n                _this.thumbClickable = false;\n            }\n        });\n\n        _this.core.$outer.find('.lg-thumb').on('touchmove.lg', function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                e.preventDefault();\n                endCoords = e.originalEvent.targetTouches[0].pageX;\n                isMoved = true;\n\n                _this.$thumbOuter.addClass('lg-dragging');\n\n                tempLeft = _this.left;\n\n                tempLeft = tempLeft - (endCoords - startCoords);\n\n                if (tempLeft > (_this.thumbTotalWidth - _this.thumbOuterWidth)) {\n                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\n                }\n\n                if (tempLeft < 0) {\n                    tempLeft = 0;\n                }\n\n                // move current slide\n                _this.setTranslate(tempLeft);\n\n            }\n        });\n\n        _this.core.$outer.find('.lg-thumb').on('touchend.lg', function() {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n\n                if (isMoved) {\n                    isMoved = false;\n                    _this.$thumbOuter.removeClass('lg-dragging');\n                    if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\n                        _this.thumbClickable = true;\n                    }\n\n                    _this.left = tempLeft;\n                } else {\n                    _this.thumbClickable = true;\n                }\n            } else {\n                _this.thumbClickable = true;\n            }\n        });\n\n    };\n\n    Thumbnail.prototype.toogle = function() {\n        var _this = this;\n        if (_this.core.s.toogleThumb) {\n            _this.core.$outer.addClass('lg-can-toggle');\n            _this.$thumbOuter.append('<button type=\"button\" aria-label=\"Toggle thumbnails\" class=\"lg-toogle-thumb lg-icon\"></button>');\n            _this.core.$outer.find('.lg-toogle-thumb').on('click.lg', function() {\n                _this.core.$outer.toggleClass('lg-thumb-open');\n            });\n        }\n    };\n\n    Thumbnail.prototype.thumbkeyPress = function() {\n        var _this = this;\n        $(window).on('keydown.lg.thumb', function(e) {\n            if (e.keyCode === 38) {\n                e.preventDefault();\n                _this.core.$outer.addClass('lg-thumb-open');\n            } else if (e.keyCode === 40) {\n                e.preventDefault();\n                _this.core.$outer.removeClass('lg-thumb-open');\n            }\n        });\n    };\n\n    Thumbnail.prototype.destroy = function() {\n        if (this.core.s.thumbnail && this.core.$items.length > 1) {\n            $(window).off('resize.lg.thumb orientationchange.lg.thumb keydown.lg.thumb');\n            this.$thumbOuter.remove();\n            this.core.$outer.removeClass('lg-has-thumb');\n        }\n    };\n\n    $.fn.lightGallery.modules.Thumbnail = Thumbnail;\n\n})();\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lg-thumbnail/dist/lg-thumbnail.js\n");

/***/ }),

/***/ "./node_modules/lg-zoom/dist/lg-zoom.js":
/*!**********************************************!*\
  !*** ./node_modules/lg-zoom/dist/lg-zoom.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! lg-zoom - v1.3.0 - October-14-2020\n* http://sachinchoolur.github.io/lightGallery\n* Copyright (c) 2020 Sachin N; Licensed GPLv3 */\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {\n      return (factory(a0));\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function ($) {\n\n(function() {\n\n    'use strict';\n\n    var getUseLeft = function() {\n        var useLeft = false;\n        var isChrome = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n        if (isChrome && parseInt(isChrome[2], 10) < 54) {\n            useLeft = true;\n        }\n\n        return useLeft;\n    };\n\n    var defaults = {\n        scale: 1,\n        zoom: true,\n        actualSize: true,\n        enableZoomAfter: 300,\n        useLeftForZoom: getUseLeft()\n    };\n\n    var Zoom = function(element) {\n\n        this.core = $(element).data('lightGallery');\n\n        this.core.s = $.extend({}, defaults, this.core.s);\n\n        if (this.core.s.zoom && this.core.doCss()) {\n            this.init();\n\n            // Store the zoomable timeout value just to clear it while closing\n            this.zoomabletimeout = false;\n\n            // Set the initial value center\n            this.pageX = $(window).width() / 2;\n            this.pageY = ($(window).height() / 2) + $(window).scrollTop();\n        }\n\n        return this;\n    };\n\n    Zoom.prototype.init = function() {\n\n        var _this = this;\n        var zoomIcons = '<button type=\"button\" aria-label=\"Zoom in\" id=\"lg-zoom-in\" class=\"lg-icon\"></button><button type=\"button\" aria-label=\"Zoom out\" id=\"lg-zoom-out\" class=\"lg-icon\"></button>';\n\n        if (_this.core.s.actualSize) {\n            zoomIcons += '<button type=\"button\" aria-label=\"Actual size\" id=\"lg-actual-size\" class=\"lg-icon\"></button>';\n        }\n\n        if (_this.core.s.useLeftForZoom) {\n            _this.core.$outer.addClass('lg-use-left-for-zoom');\n        } else {\n            _this.core.$outer.addClass('lg-use-transition-for-zoom');\n        }\n\n        this.core.$outer.find('.lg-toolbar').append(zoomIcons);\n\n        // Add zoomable class\n        _this.core.$el.on('onSlideItemLoad.lg.tm.zoom', function(event, index, delay) {\n\n            // delay will be 0 except first time\n            var _speed = _this.core.s.enableZoomAfter + delay;\n\n            // set _speed value 0 if gallery opened from direct url and if it is first slide\n            if ($('body').hasClass('lg-from-hash') && delay) {\n\n                // will execute only once\n                _speed = 0;\n            } else {\n\n                // Remove lg-from-hash to enable starting animation.\n                $('body').removeClass('lg-from-hash');\n            }\n\n            _this.zoomabletimeout = setTimeout(function() {\n                _this.core.$slide.eq(index).addClass('lg-zoomable');\n            }, _speed + 30);\n        });\n\n        var scale = 1;\n        /**\n         * @desc Image zoom\n         * Translate the wrap and scale the image to get better user experience\n         *\n         * @param {String} scaleVal - Zoom decrement/increment value\n         */\n        var zoom = function(scaleVal) {\n\n            var $image = _this.core.$outer.find('.lg-current .lg-image');\n            var _x;\n            var _y;\n\n            // Find offset manually to avoid issue after zoom\n            var offsetX = ($(window).width() - $image.prop('offsetWidth')) / 2;\n            var offsetY = (($(window).height() - $image.prop('offsetHeight')) / 2) + $(window).scrollTop();\n\n            _x = _this.pageX - offsetX;\n            _y = _this.pageY - offsetY;\n\n            var x = (scaleVal - 1) * (_x);\n            var y = (scaleVal - 1) * (_y);\n\n            $image.css('transform', 'scale3d(' + scaleVal + ', ' + scaleVal + ', 1)').attr('data-scale', scaleVal);\n\n            if (_this.core.s.useLeftForZoom) {\n                $image.parent().css({\n                    left: -x + 'px',\n                    top: -y + 'px'\n                }).attr('data-x', x).attr('data-y', y);\n            } else {\n                $image.parent().css('transform', 'translate3d(-' + x + 'px, -' + y + 'px, 0)').attr('data-x', x).attr('data-y', y);\n            }\n        };\n\n        var callScale = function() {\n            if (scale > 1) {\n                _this.core.$outer.addClass('lg-zoomed');\n            } else {\n                _this.resetZoom();\n            }\n\n            if (scale < 1) {\n                scale = 1;\n            }\n\n            zoom(scale);\n        };\n\n        var actualSize = function(event, $image, index, fromIcon) {\n            var w = $image.prop('offsetWidth');\n            var nw;\n            if (_this.core.s.dynamic) {\n                nw = _this.core.s.dynamicEl[index].width || $image[0].naturalWidth || w;\n            } else {\n                nw = _this.core.$items.eq(index).attr('data-width') || $image[0].naturalWidth || w;\n            }\n\n            var _scale;\n\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\n                scale = 1;\n            } else {\n                if (nw > w) {\n                    _scale = nw / w;\n                    scale = _scale || 2;\n                }\n            }\n\n            if (fromIcon) {\n                _this.pageX = $(window).width() / 2;\n                _this.pageY = ($(window).height() / 2) + $(window).scrollTop();\n            } else {\n                _this.pageX = event.pageX || event.originalEvent.targetTouches[0].pageX;\n                _this.pageY = event.pageY || event.originalEvent.targetTouches[0].pageY;\n            }\n\n            callScale();\n            setTimeout(function() {\n                _this.core.$outer.removeClass('lg-grabbing').addClass('lg-grab');\n            }, 10);\n        };\n\n        var tapped = false;\n\n        // event triggered after appending slide content\n        _this.core.$el.on('onAferAppendSlide.lg.tm.zoom', function(event, index) {\n\n            // Get the current element\n            var $image = _this.core.$slide.eq(index).find('.lg-image');\n\n            $image.on('dblclick', function(event) {\n                actualSize(event, $image, index);\n            });\n\n            $image.on('touchstart', function(event) {\n                if (!tapped) {\n                    tapped = setTimeout(function() {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    actualSize(event, $image, index);\n                }\n\n                event.preventDefault();\n            });\n\n        });\n\n        // Update zoom on resize and orientationchange\n        $(window).on('resize.lg.zoom scroll.lg.zoom orientationchange.lg.zoom', function() {\n            _this.pageX = $(window).width() / 2;\n            _this.pageY = ($(window).height() / 2) + $(window).scrollTop();\n            zoom(scale);\n        });\n\n        $('#lg-zoom-out').on('click.lg', function() {\n            if (_this.core.$outer.find('.lg-current .lg-image').length) {\n                scale -= _this.core.s.scale;\n                callScale();\n            }\n        });\n\n        $('#lg-zoom-in').on('click.lg', function() {\n            if (_this.core.$outer.find('.lg-current .lg-image').length) {\n                scale += _this.core.s.scale;\n                callScale();\n            }\n        });\n\n        $('#lg-actual-size').on('click.lg', function(event) {\n            actualSize(event, _this.core.$slide.eq(_this.core.index).find('.lg-image'), _this.core.index, true);\n        });\n\n        // Reset zoom on slide change\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\n            scale = 1;\n            _this.resetZoom();\n        });\n\n        // Drag option after zoom\n        _this.zoomDrag();\n\n        _this.zoomSwipe();\n\n    };\n\n    /**\n     * \n     * @param {Element} el \n     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\n     * Get the current transform value\n     */\n    Zoom.prototype.getCurrentTransform = function (el) {\n        if (!el) {\n            return 0;\n        }\n        var st = window.getComputedStyle(el, null);\n        var tm = st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            return tm.split('(')[1].split(')')[0].split(',');\n        }\n        return 0;\n    };\n\n    Zoom.prototype.getCurrentRotation = function (el) {\n        if (!el) {\n            return 0;\n        }\n        var values = this.getCurrentTransform(el);\n        if (values) {\n            return Math.round(Math.atan2(values[1], values[0]) * (180 / Math.PI));\n            // If you want rotate in 360\n            //return (angle < 0 ? angle + 360 : angle);\n        }\n        return 0;\n    };\n\n    Zoom.prototype.getModifier = function (rotateValue, axis, el) {\n        var originalRotate = rotateValue;\n        rotateValue = Math.abs(rotateValue);\n        var transformValues = this.getCurrentTransform(el);\n        if (!transformValues) {\n            return 1;\n        }\n        var modifier = 1;\n        if (axis === 'X') {\n            var flipHorizontalValue = Math.sign(parseFloat(transformValues[0]));\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                if ((originalRotate === -90 && flipHorizontalValue === 1) || (originalRotate === 90 && flipHorizontalValue === -1)) {\n                    modifier = -1;\n                } else {\n                    modifier = 1;\n                }\n            }\n            modifier = modifier * flipHorizontalValue;\n        } else {\n            var flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                var sinX = parseFloat(transformValues[1]);\n                var sinMinusX = parseFloat(transformValues[2]);\n                modifier = Math.sign(sinX * sinMinusX * originalRotate * flipVerticalValue);\n            }\n            modifier = modifier * flipVerticalValue;\n        }\n        return modifier;\n    };\n\n    Zoom.prototype.getImageSize = function ($image, rotateValue, axis) {\n        var imageSizes = {\n            y: 'offsetHeight',\n            x: 'offsetWidth'\n        };\n        if (rotateValue === 90) {\n            // Swap axis \n            if (axis === 'x') {\n                axis = 'y';\n            } else {\n                axis = 'x';\n            }\n        }\n        return $image.prop(imageSizes[axis]);\n    };\n\n    Zoom.prototype.getDragCords = function (e, rotateValue) {\n        if (rotateValue === 90) {\n            return {\n                x: e.pageY,\n                y: e.pageX\n            };\n        } else {\n            return {\n                x: e.pageX,\n                y: e.pageY\n            };\n        }\n    };\n    Zoom.prototype.getSwipeCords = function (e, rotateValue) {\n        var x = e.originalEvent.targetTouches[0].pageX;\n        var y = e.originalEvent.targetTouches[0].pageY;\n        if (rotateValue === 90) {\n            return {\n                x: y,\n                y: x\n            };\n        } else {\n            return {\n                x: x,\n                y: y\n            };\n        }\n    };\n\n    Zoom.prototype.getPossibleDragCords = function ($image, rotateValue) {\n\n        var minY = (this.core.$outer.find('.lg').height() - this.getImageSize($image, rotateValue, 'y')) / 2;\n        var maxY = Math.abs((this.getImageSize($image, rotateValue, 'y') * Math.abs($image.attr('data-scale'))) - this.core.$outer.find('.lg').height() + minY);\n        var minX = (this.core.$outer.find('.lg').width() - this.getImageSize($image, rotateValue, 'x')) / 2;\n        var maxX = Math.abs((this.getImageSize($image, rotateValue, 'x') * Math.abs($image.attr('data-scale'))) - this.core.$outer.find('.lg').width() + minX);\n        if (rotateValue === 90) {\n            return {\n                minY: minX,\n                maxY: maxX,\n                minX: minY,\n                maxX: maxY,\n            };\n        } else {\n            return {\n                minY: minY,\n                maxY: maxY,\n                minX: minX,\n                maxX: maxX,\n            };\n        }\n    };\n\n    Zoom.prototype.getDragAllowedAxises = function ($image, rotateValue) {\n        var allowY = this.getImageSize($image, rotateValue, 'y') * $image.attr('data-scale') > this.core.$outer.find('.lg').height();\n        var allowX = this.getImageSize($image, rotateValue, 'x') * $image.attr('data-scale') > this.core.$outer.find('.lg').width();\n        if (rotateValue === 90) {\n            return {\n                allowX: allowY,\n                allowY: allowX\n            };\n        } else {\n            return {\n                allowX: allowX,\n                allowY: allowY\n            };\n        }\n    };\n\n    // Reset zoom effect\n    Zoom.prototype.resetZoom = function() {\n        this.core.$outer.removeClass('lg-zoomed');\n        this.core.$slide.find('.lg-img-wrap').removeAttr('style data-x data-y');\n        this.core.$slide.find('.lg-image').removeAttr('style data-scale');\n\n        // Reset pagx pagy values to center\n        this.pageX = $(window).width() / 2;\n        this.pageY = ($(window).height() / 2) + $(window).scrollTop();\n    };\n\n    Zoom.prototype.zoomSwipe = function() {\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isMoved = false;\n\n        // Allow x direction drag\n        var allowX = false;\n\n        // Allow Y direction drag\n        var allowY = false;\n\n        var rotateValue = 0;\n        var rotateEl;\n\n        _this.core.$slide.on('touchstart.lg', function(e) {\n\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\n                var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\n\n                rotateEl = _this.core.$slide.eq(_this.core.index).find('.lg-img-rotate')[0];\n                rotateValue = _this.getCurrentRotation(rotateEl);    \n\n                var dragAllowedAxises = _this.getDragAllowedAxises($image, Math.abs(rotateValue));\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n    \n                if ((allowX || allowY)) {\n                    e.preventDefault();\n                    startCoords = _this.getSwipeCords(e, Math.abs(rotateValue));\n                }\n            }\n\n        });\n\n        _this.core.$slide.on('touchmove.lg', function(e) {\n\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\n\n                var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\n                var distanceX;\n                var distanceY;\n\n                e.preventDefault();\n                isMoved = true;\n\n                endCoords = _this.getSwipeCords(e, Math.abs(rotateValue));\n\n                // reset opacity and transition duration\n                _this.core.$outer.addClass('lg-zoom-dragging');\n\n                if (allowY) {\n                    distanceY = (-Math.abs(_$el.attr('data-y'))) + ((endCoords.y - startCoords.y) * _this.getModifier(rotateValue, 'Y', rotateEl));\n                } else {\n                    distanceY = -Math.abs(_$el.attr('data-y'));\n                }\n\n                if (allowX) {\n                    distanceX = (-Math.abs(_$el.attr('data-x'))) + ((endCoords.x - startCoords.x) * _this.getModifier(rotateValue, 'X', rotateEl));\n\n                } else {\n                    distanceX = -Math.abs(_$el.attr('data-x'));\n                }\n\n                if ((Math.abs(endCoords.x - startCoords.x) > 15) || (Math.abs(endCoords.y - startCoords.y) > 15)) {\n\n                    if (_this.core.s.useLeftForZoom) {\n                        _$el.css({\n                            left: distanceX + 'px',\n                            top: distanceY + 'px'\n                        });\n                    } else {\n                        _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n                    }\n                }\n\n            }\n\n        });\n\n        _this.core.$slide.on('touchend.lg', function() {\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\n                if (isMoved) {\n                    isMoved = false;\n                    _this.core.$outer.removeClass('lg-zoom-dragging');\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY, rotateValue);\n\n                }\n            }\n        });\n\n    };\n\n    Zoom.prototype.zoomDrag = function() {\n\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isDraging = false;\n        var isMoved = false;\n\n        // Allow x direction drag\n        var allowX = false;\n\n        // Allow Y direction drag\n        var allowY = false;\n\n        var rotateValue = 0;\n        var rotateEl;\n        \n        _this.core.$slide.on('mousedown.lg.zoom', function(e) {\n            rotateEl = _this.core.$slide.eq(_this.core.index).find('.lg-img-rotate')[0];\n            rotateValue = _this.getCurrentRotation(rotateEl);\n            // execute only on .lg-object\n            var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\n            var dragAllowedAxises = _this.getDragAllowedAxises($image, Math.abs(rotateValue));\n            allowY = dragAllowedAxises.allowY;\n            allowX = dragAllowedAxises.allowX;\n\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\n                if ($(e.target).hasClass('lg-object') && (allowX || allowY)) {\n                    e.preventDefault();\n                    startCoords = _this.getDragCords(e, Math.abs(rotateValue));\n\n                    isDraging = true;\n\n                    // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                    _this.core.$outer.scrollLeft += 1;\n                    _this.core.$outer.scrollLeft -= 1;\n\n                    _this.core.$outer.removeClass('lg-grab').addClass('lg-grabbing');\n                }\n            }\n        });\n\n        $(window).on('mousemove.lg.zoom', function(e) {\n            if (isDraging) {\n                var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\n                var distanceX;\n                var distanceY;\n\n                isMoved = true;\n                endCoords = _this.getDragCords(e, Math.abs(rotateValue));\n\n                // reset opacity and transition duration\n                _this.core.$outer.addClass('lg-zoom-dragging');\n\n                if (allowY) {\n                    distanceY = (-Math.abs(_$el.attr('data-y'))) + ((endCoords.y - startCoords.y) * _this.getModifier(rotateValue, 'Y', rotateEl));\n                } else {\n                    distanceY = -Math.abs(_$el.attr('data-y'));\n                }\n                \n                if (allowX) {\n                    distanceX = (-Math.abs(_$el.attr('data-x'))) + ((endCoords.x - startCoords.x) * _this.getModifier(rotateValue, 'X', rotateEl));\n                } else {\n                    distanceX = -Math.abs(_$el.attr('data-x'));\n                }\n\n                if (_this.core.s.useLeftForZoom) {\n                    _$el.css({\n                        left: distanceX + 'px',\n                        top: distanceY + 'px'\n                    });\n                } else {\n                    _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n                }\n            }\n        });\n\n        $(window).on('mouseup.lg.zoom', function(e) {\n\n            if (isDraging) {\n                isDraging = false;\n                _this.core.$outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (isMoved && ((startCoords.x !== endCoords.x) || (startCoords.y !== endCoords.y))) {\n                    endCoords = _this.getDragCords(e, Math.abs(rotateValue));\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY, rotateValue);\n\n                }\n\n                isMoved = false;\n            }\n\n            _this.core.$outer.removeClass('lg-grabbing').addClass('lg-grab');\n\n        });\n    };\n\n    Zoom.prototype.touchendZoom = function(startCoords, endCoords, allowX, allowY, rotateValue) {\n\n        var _this = this;\n        var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\n        var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\n        var rotateEl = _this.core.$slide.eq(_this.core.index).find('.lg-img-rotate')[0];\n        var distanceX = (-Math.abs(_$el.attr('data-x'))) + ((endCoords.x - startCoords.x) * _this.getModifier(rotateValue, 'X', rotateEl));\n        var distanceY = (-Math.abs(_$el.attr('data-y'))) + ((endCoords.y - startCoords.y) * _this.getModifier(rotateValue, 'Y', rotateEl));\n        var possibleDragCords = _this.getPossibleDragCords($image, Math.abs(rotateValue));\n        if ((Math.abs(endCoords.x - startCoords.x) > 15) || (Math.abs(endCoords.y - startCoords.y) > 15)) {\n            if (allowY) {\n                if (distanceY <= -possibleDragCords.maxY) {\n                    distanceY = -possibleDragCords.maxY;\n                } else if (distanceY >= -possibleDragCords.minY) {\n                    distanceY = -possibleDragCords.minY;\n                }\n            }\n\n            if (allowX) {\n                if (distanceX <= -possibleDragCords.maxX) {\n                    distanceX = -possibleDragCords.maxX;\n                } else if (distanceX >= -possibleDragCords.minX) {\n                    distanceX = -possibleDragCords.minX;\n                }\n            }\n\n            if (allowY) {\n                _$el.attr('data-y', Math.abs(distanceY));\n            } else {\n                distanceY = -Math.abs(_$el.attr('data-y'));\n            }\n\n            if (allowX) {\n                _$el.attr('data-x', Math.abs(distanceX));\n            } else {\n                distanceX = -Math.abs(_$el.attr('data-x'));\n            }\n\n            if (_this.core.s.useLeftForZoom) {\n                _$el.css({\n                    left: distanceX + 'px',\n                    top: distanceY + 'px'\n                });\n            } else {\n                _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n            }\n\n        }\n    };\n\n    Zoom.prototype.destroy = function() {\n\n        var _this = this;\n\n        // Unbind all events added by lightGallery zoom plugin\n        _this.core.$el.off('.lg.zoom');\n        $(window).off('.lg.zoom');\n        _this.core.$slide.off('.lg.zoom');\n        _this.core.$el.off('.lg.tm.zoom');\n        _this.resetZoom();\n        clearTimeout(_this.zoomabletimeout);\n        _this.zoomabletimeout = false;\n    };\n\n    $.fn.lightGallery.modules.zoom = Zoom;\n\n})();\n\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lg-zoom/dist/lg-zoom.js\n");

/***/ })

}]);